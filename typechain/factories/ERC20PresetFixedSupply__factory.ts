/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20PresetFixedSupply,
  ERC20PresetFixedSupplyInterface,
} from "../ERC20PresetFixedSupply";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001db138038062001db1833981810160405281019062000037919062000368565b83838160039080519060200190620000519291906200020c565b5080600490805190602001906200006a9291906200020c565b5050506200007f81836200008960201b60201c565b505050506200074b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415620000fc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000f39062000450565b60405180910390fd5b62000110600083836200020260201b60201c565b8060026000828254620001249190620004ff565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200017b9190620004ff565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620001e2919062000472565b60405180910390a3620001fe600083836200020760201b60201c565b5050565b505050565b505050565b8280546200021a90620005d0565b90600052602060002090601f0160209004810192826200023e57600085556200028a565b82601f106200025957805160ff19168380011785556200028a565b828001600101855582156200028a579182015b82811115620002895782518255916020019190600101906200026c565b5b5090506200029991906200029d565b5090565b5b80821115620002b85760008160009055506001016200029e565b5090565b6000620002d3620002cd84620004b8565b6200048f565b905082815260208101848484011115620002f257620002f1620006ce565b5b620002ff8482856200059a565b509392505050565b600081519050620003188162000717565b92915050565b600082601f830112620003365762000335620006c9565b5b815162000348848260208601620002bc565b91505092915050565b600081519050620003628162000731565b92915050565b60008060008060808587031215620003855762000384620006d8565b5b600085015167ffffffffffffffff811115620003a657620003a5620006d3565b5b620003b4878288016200031e565b945050602085015167ffffffffffffffff811115620003d857620003d7620006d3565b5b620003e6878288016200031e565b9350506040620003f98782880162000351565b92505060606200040c8782880162000307565b91505092959194509250565b600062000427601f83620004ee565b91506200043482620006ee565b602082019050919050565b6200044a8162000590565b82525050565b600060208201905081810360008301526200046b8162000418565b9050919050565b60006020820190506200048960008301846200043f565b92915050565b60006200049b620004ae565b9050620004a9828262000606565b919050565b6000604051905090565b600067ffffffffffffffff821115620004d657620004d56200069a565b5b620004e182620006dd565b9050602081019050919050565b600082825260208201905092915050565b60006200050c8262000590565b9150620005198362000590565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156200055157620005506200063c565b5b828201905092915050565b6000620005698262000570565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015620005ba5780820151818401526020810190506200059d565b83811115620005ca576000848401525b50505050565b60006002820490506001821680620005e957607f821691505b602082108114156200060057620005ff6200066b565b5b50919050565b6200061182620006dd565b810181811067ffffffffffffffff821117156200063357620006326200069a565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b62000722816200055c565b81146200072e57600080fd5b50565b6200073c8162000590565b81146200074857600080fd5b50565b611656806200075b6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806342966c681161008c57806395d89b411161006657806395d89b4114610226578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806342966c68146101be57806370a08231146101da57806379cc67901461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190611005565b60405180910390f35b61010c60048036038101906101079190610ddc565b610366565b6040516101199190610fea565b60405180910390f35b61012a610389565b6040516101379190611147565b60405180910390f35b61015a60048036038101906101559190610d89565b610393565b6040516101679190610fea565b60405180910390f35b6101786103c2565b6040516101859190611162565b60405180910390f35b6101a860048036038101906101a39190610ddc565b6103cb565b6040516101b59190610fea565b60405180910390f35b6101d860048036038101906101d39190610e1c565b610402565b005b6101f460048036038101906101ef9190610d1c565b610416565b6040516102019190611147565b60405180910390f35b610224600480360381019061021f9190610ddc565b61045e565b005b61022e61047e565b60405161023b9190611005565b60405180910390f35b61025e60048036038101906102599190610ddc565b610510565b60405161026b9190610fea565b60405180910390f35b61028e60048036038101906102899190610ddc565b610587565b60405161029b9190610fea565b60405180910390f35b6102be60048036038101906102b99190610d49565b6105aa565b6040516102cb9190611147565b60405180910390f35b6060600380546102e3906112ab565b80601f016020809104026020016040519081016040528092919081815260200182805461030f906112ab565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610631565b905061037e818585610639565b600191505092915050565b6000600254905090565b60008061039e610631565b90506103ab858285610804565b6103b6858585610890565b60019150509392505050565b60006012905090565b6000806103d6610631565b90506103f78185856103e885896105aa565b6103f29190611199565b610639565b600191505092915050565b61041361040d610631565b82610b11565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6104708261046a610631565b83610804565b61047a8282610b11565b5050565b60606004805461048d906112ab565b80601f01602080910402602001604051908101604052809291908181526020018280546104b9906112ab565b80156105065780601f106104db57610100808354040283529160200191610506565b820191906000526020600020905b8154815290600101906020018083116104e957829003601f168201915b5050505050905090565b60008061051b610631565b9050600061052982866105aa565b90508381101561056e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056590611127565b60405180910390fd5b61057b8286868403610639565b60019250505092915050565b600080610592610631565b905061059f818585610890565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090611107565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610719576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071090611067565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107f79190611147565b60405180910390a3505050565b600061081084846105aa565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461088a578181101561087c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087390611087565b60405180910390fd5b6108898484848403610639565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f7906110e7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610970576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096790611027565b60405180910390fd5b61097b838383610ce8565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a01576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f8906110a7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a949190611199565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610af89190611147565b60405180910390a3610b0b848484610ced565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610b81576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b78906110c7565b60405180910390fd5b610b8d82600083610ce8565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c13576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0a90611047565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254610c6a91906111ef565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ccf9190611147565b60405180910390a3610ce383600084610ced565b505050565b505050565b505050565b600081359050610d01816115f2565b92915050565b600081359050610d1681611609565b92915050565b600060208284031215610d3257610d3161133b565b5b6000610d4084828501610cf2565b91505092915050565b60008060408385031215610d6057610d5f61133b565b5b6000610d6e85828601610cf2565b9250506020610d7f85828601610cf2565b9150509250929050565b600080600060608486031215610da257610da161133b565b5b6000610db086828701610cf2565b9350506020610dc186828701610cf2565b9250506040610dd286828701610d07565b9150509250925092565b60008060408385031215610df357610df261133b565b5b6000610e0185828601610cf2565b9250506020610e1285828601610d07565b9150509250929050565b600060208284031215610e3257610e3161133b565b5b6000610e4084828501610d07565b91505092915050565b610e5281611235565b82525050565b6000610e638261117d565b610e6d8185611188565b9350610e7d818560208601611278565b610e8681611340565b840191505092915050565b6000610e9e602383611188565b9150610ea982611351565b604082019050919050565b6000610ec1602283611188565b9150610ecc826113a0565b604082019050919050565b6000610ee4602283611188565b9150610eef826113ef565b604082019050919050565b6000610f07601d83611188565b9150610f128261143e565b602082019050919050565b6000610f2a602683611188565b9150610f3582611467565b604082019050919050565b6000610f4d602183611188565b9150610f58826114b6565b604082019050919050565b6000610f70602583611188565b9150610f7b82611505565b604082019050919050565b6000610f93602483611188565b9150610f9e82611554565b604082019050919050565b6000610fb6602583611188565b9150610fc1826115a3565b604082019050919050565b610fd581611261565b82525050565b610fe48161126b565b82525050565b6000602082019050610fff6000830184610e49565b92915050565b6000602082019050818103600083015261101f8184610e58565b905092915050565b6000602082019050818103600083015261104081610e91565b9050919050565b6000602082019050818103600083015261106081610eb4565b9050919050565b6000602082019050818103600083015261108081610ed7565b9050919050565b600060208201905081810360008301526110a081610efa565b9050919050565b600060208201905081810360008301526110c081610f1d565b9050919050565b600060208201905081810360008301526110e081610f40565b9050919050565b6000602082019050818103600083015261110081610f63565b9050919050565b6000602082019050818103600083015261112081610f86565b9050919050565b6000602082019050818103600083015261114081610fa9565b9050919050565b600060208201905061115c6000830184610fcc565b92915050565b60006020820190506111776000830184610fdb565b92915050565b600081519050919050565b600082825260208201905092915050565b60006111a482611261565b91506111af83611261565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156111e4576111e36112dd565b5b828201905092915050565b60006111fa82611261565b915061120583611261565b925082821015611218576112176112dd565b5b828203905092915050565b600061122e82611241565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561129657808201518184015260208101905061127b565b838111156112a5576000848401525b50505050565b600060028204905060018216806112c357607f821691505b602082108114156112d7576112d661130c565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6115fb81611223565b811461160657600080fd5b50565b61161281611261565b811461161d57600080fd5b5056fea264697066735822122048e066912343375dd7318841e72fb3843f5f068b4f53aedffc95800591e7272664736f6c63430008060033";

export class ERC20PresetFixedSupply__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20PresetFixedSupply> {
    return super.deploy(
      name,
      symbol,
      initialSupply,
      owner,
      overrides || {}
    ) as Promise<ERC20PresetFixedSupply>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    initialSupply: BigNumberish,
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialSupply,
      owner,
      overrides || {}
    );
  }
  attach(address: string): ERC20PresetFixedSupply {
    return super.attach(address) as ERC20PresetFixedSupply;
  }
  connect(signer: Signer): ERC20PresetFixedSupply__factory {
    return super.connect(signer) as ERC20PresetFixedSupply__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20PresetFixedSupplyInterface {
    return new utils.Interface(_abi) as ERC20PresetFixedSupplyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20PresetFixedSupply {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20PresetFixedSupply;
  }
}
