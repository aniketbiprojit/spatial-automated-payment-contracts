{
  "address": "0x8aAb35999B252eD52BFA57896A662e0551aBCdfA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "invoiceData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "start",
          "type": "uint256"
        }
      ],
      "name": "ExecuteInvoice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "invoiceData",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "name": "InvoiceCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetCurrency",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "EXECUTOR_CONTRACT",
          "type": "address"
        }
      ],
      "name": "SetExecutorContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "SetFeePercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payee",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SetPayee",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EXECUTOR_CONTRACT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNIQUE_INDENTIFIER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "cancelledInvoices",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "invoiceData",
          "type": "tuple"
        }
      ],
      "name": "createInvoice",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "returnedInvoice",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currencies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "invoiceData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_EXECUTOR_CONTRACT",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "payees",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable[]",
          "name": "_currencies",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_EXECUTOR_CONTRACT",
          "type": "address"
        }
      ],
      "name": "setExecutorContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "payee",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "payer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "enum AbstractInvoice.Frequency",
              "name": "frequency",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "startingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "durationForRetiresBeforeFailure",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "paymentNonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "paymentParameter",
              "type": "bytes32"
            }
          ],
          "internalType": "struct AbstractInvoice.InvoiceData",
          "name": "invoiceData",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "verifySignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_payees",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "whitelistPayee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x590600c717e5930cb1b5ac1d73c43677f45cf5438c11ca71367939dfc0a30eb8",
  "receipt": {
    "to": null,
    "from": "0x79f3E0FfB9ab81C05731a05DbCDE4956014Ed7E7",
    "contractAddress": "0x8aAb35999B252eD52BFA57896A662e0551aBCdfA",
    "transactionIndex": 5,
    "gasUsed": "3655215",
    "logsBloom": "0x
    "blockHash": "0x37ea81bbb01ada42fcb73c988d40d37687e17a117275dc240e47e09abc9606a0",
    "transactionHash": "0x590600c717e5930cb1b5ac1d73c43677f45cf5438c11ca71367939dfc0a30eb8",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27168789,
        "transactionHash": "0x590600c717e5930cb1b5ac1d73c43677f45cf5438c11ca71367939dfc0a30eb8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000079f3e0ffb9ab81c05731a05dbcde4956014ed7e7",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002894bef0d1be0b70000000000000000000000000000000000000000000000008d1616b77067b89b0000000000000000000000000000000000000000000004b48de89adb7de06fad0000000000000000000000000000000000000000000000008a8ccac8634bd7e40000000000000000000000000000000000000000000004b49071e6ca8afc5064",
        "logIndex": 43,
        "blockHash": "0x37ea81bbb01ada42fcb73c988d40d37687e17a117275dc240e47e09abc9606a0"
      }
    ],
    "blockNumber": 27168789,
    "cumulativeGasUsed": "5739210",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "94a548fbec3aee7e66903091f213a40a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"invoiceData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"}],\"name\":\"ExecuteInvoice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"invoiceData\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"name\":\"InvoiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetCurrency\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"EXECUTOR_CONTRACT\",\"type\":\"address\"}],\"name\":\"SetExecutorContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"SetFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SetPayee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EXECUTOR_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIQUE_INDENTIFIER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cancelledInvoices\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"invoiceData\",\"type\":\"tuple\"}],\"name\":\"createInvoice\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"returnedInvoice\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currencies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"invoiceData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EXECUTOR_CONTRACT\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"payees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable[]\",\"name\":\"_currencies\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EXECUTOR_CONTRACT\",\"type\":\"address\"}],\"name\":\"setExecutorContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"payee\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"enum AbstractInvoice.Frequency\",\"name\":\"frequency\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"startingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationForRetiresBeforeFailure\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paymentNonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"paymentParameter\",\"type\":\"bytes32\"}],\"internalType\":\"struct AbstractInvoice.InvoiceData\",\"name\":\"invoiceData\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"verifySignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_payees\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"whitelistPayee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Invoice/Invoice.sol\":\"Invoice\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271Upgradeable {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x4473c09c087ee1a48c5547b23799c0474b2e08cde6fec5921c628171c4ebcdc0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf42efac0d704b136c4d85e970562d4dbc1160d726ee93b5133122eb14fe368df\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe8c62ca00ed2d0a4d9b7e3c4bf7d62c821618b2cdb3c844da91a1193986851bf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../AddressUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1271Upgradeable.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureCheckerUpgradeable {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\\n            return true;\\n        }\\n\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\\n        );\\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\\n    }\\n}\\n\",\"keccak256\":\"0xb19a57535ad6c6d773f61c1e8f8cc190fa35e12bfadf3743092537c7695fd96a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/presets/ERC20PresetFixedSupply.sol)\\npragma solidity ^0.8.0;\\n\\nimport \\\"../extensions/ERC20Burnable.sol\\\";\\n\\n/**\\n * @dev {ERC20} token, including:\\n *\\n *  - Preminted initial supply\\n *  - Ability for holders to burn (destroy) their tokens\\n *  - No access control mechanism (for minting/pausing) and hence no governance\\n *\\n * This contract uses {ERC20Burnable} to include burn capabilities - head to\\n * its documentation for details.\\n *\\n * _Available since v3.4._\\n *\\n * _Deprecated in favor of https://wizard.openzeppelin.com/[Contracts Wizard]._\\n */\\ncontract ERC20PresetFixedSupply is ERC20Burnable {\\n    /**\\n     * @dev Mints `initialSupply` amount of token and transfers them to `owner`.\\n     *\\n     * See {ERC20-constructor}.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 initialSupply,\\n        address owner\\n    ) ERC20(name, symbol) {\\n        _mint(owner, initialSupply);\\n    }\\n}\\n\",\"keccak256\":\"0x93018808e929b9e03bb2e9e8981fe737ef079d1152abdf23b16e9f2dcf4d4b1e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Invoice/AbstractInvoice.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.6;\\n\\nabstract contract AbstractInvoice {\\n\\tenum Frequency {\\n\\t\\tSingle,\\n\\t\\tDaily,\\n\\t\\tWeekly,\\n\\t\\tMonthly,\\n\\t\\tQuarterly,\\n\\t\\tYearly\\n\\t}\\n\\n\\t// the keccak of this should be in system\\n\\tstruct InvoiceData {\\n\\t\\taddress payee;\\n\\t\\taddress payer;\\n\\t\\tuint256 amount;\\n\\t\\taddress currency;\\n\\t\\t// how often\\n\\t\\tFrequency frequency;\\n\\t\\t// first payment\\n\\t\\tuint256 startingTime;\\n\\t\\t// if first payment was supposed to be on 10-May-2022, 12PM,\\n\\t\\t// the system can try to make that payment for next 24 hours buffer\\n\\t\\tuint256 durationForRetiresBeforeFailure;\\n\\t\\t// expiration of payment\\n\\t\\tuint256 expiry;\\n\\t\\t// payment nonce\\n\\t\\tuint256 paymentNonce;\\n\\t\\t// unique paramater\\n\\t\\tbytes32 paymentParameter;\\n\\t}\\n\\n\\tfunction execute(InvoiceData memory invoiceData, bytes memory signature)\\n\\t\\texternal\\n\\t\\tvirtual;\\n}\\n\",\"keccak256\":\"0x060bb92ee91a0cdf317667f0a24ad72ce4e66bc7c1002d8ff1388d40736a2d61\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/Invoice/Invoice.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.6;\\n\\nimport \\\"../utils/AbstractAccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol\\\";\\nimport \\\"./AbstractInvoice.sol\\\";\\n\\ncontract Invoice is AbstractAccessControl, AbstractInvoice {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\tusing StringsUpgradeable for uint256;\\n\\n\\tstring public UNIQUE_INDENTIFIER;\\n\\n\\taddress public EXECUTOR_CONTRACT;\\n\\n\\tfunction initialize(address _EXECUTOR_CONTRACT) public initializer {\\n\\t\\tinit();\\n\\t\\tUNIQUE_INDENTIFIER = \\\"PBIT-APP\\\";\\n\\t\\tfeePercent = 10;\\n\\n\\t\\t_durations[Frequency.Single] = 0;\\n\\t\\t_durations[Frequency.Daily] = 24 hours;\\n\\t\\t_durations[Frequency.Weekly] = 7 days;\\n\\t\\t_durations[Frequency.Monthly] = 30 days;\\n\\t\\t_durations[Frequency.Quarterly] = 180 days;\\n\\t\\t_durations[Frequency.Yearly] = 365 days;\\n\\n\\t\\tEXECUTOR_CONTRACT = _EXECUTOR_CONTRACT;\\n\\t}\\n\\n\\tuint256 public feePercent;\\n\\n\\tmapping(Frequency => uint256) internal _durations;\\n\\n\\tmapping(bytes32 => bool) internal _createdInvoices;\\n\\tmapping(bytes32 => mapping(uint256 => bool)) internal _paidInvoices;\\n\\tmapping(uint256 => bool) public cancelledInvoices;\\n\\n\\tmapping(address => bool) public payees;\\n\\tmapping(IERC20Upgradeable => bool) public currencies;\\n\\n\\tuint256 public nonce;\\n\\n\\tfunction isInRange(\\n\\t\\tuint256 startingTime,\\n\\t\\tFrequency frequency,\\n\\t\\tuint256 durationForRetiresBeforeFailure,\\n\\t\\tuint256 expiry\\n\\t) internal view returns (bool, uint256) {\\n\\t\\tuint256 start = startingTime;\\n\\t\\tuint256 end = start + durationForRetiresBeforeFailure;\\n\\t\\twhile (end < expiry) {\\n\\t\\t\\tstart += _durations[frequency];\\n\\t\\t\\tend = start + durationForRetiresBeforeFailure;\\n\\t\\t\\tif (block.timestamp > start && end < expiry) {\\n\\t\\t\\t\\treturn (true, start);\\n\\t\\t\\t}\\n\\t\\t\\tif (start > block.timestamp) {\\n\\t\\t\\t\\treturn (false, 0);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn (false, 0);\\n\\t}\\n\\n\\tfunction _createInvoice(InvoiceData memory invoiceData) internal returns (InvoiceData memory, bytes32 _hash) {\\n\\t\\trequire(invoiceData.amount > 0, \\\"Amount cannot be 0\\\");\\n\\t\\trequire(payees[invoiceData.payee], \\\"Not a payee\\\");\\n\\t\\trequire(currencies[IERC20Upgradeable(invoiceData.currency)], \\\"Not a valid currency\\\");\\n\\t\\trequire(invoiceData.startingTime >= (block.timestamp + 1 hours), \\\"Invoice too soon. Cannot process\\\");\\n\\t\\trequire(\\n\\t\\t\\tinvoiceData.expiry > invoiceData.startingTime &&\\n\\t\\t\\t\\t((invoiceData.expiry - invoiceData.startingTime) >= 24 hours),\\n\\t\\t\\t\\\"Expiry should be greater than 24 hours\\\"\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\tinvoiceData.durationForRetiresBeforeFailure >= 12 hours,\\n\\t\\t\\t\\\"Duration for retries should be greater than 12 hours\\\"\\n\\t\\t);\\n\\n\\t\\tnonce += 1;\\n\\t\\tinvoiceData.paymentParameter = keccak256(abi.encode(UNIQUE_INDENTIFIER, \\\"-\\\", nonce.toString()));\\n\\t\\tinvoiceData.paymentNonce = nonce;\\n\\t\\t_hash = keccak256(abi.encode(invoiceData));\\n\\t\\trequire(_createdInvoices[_hash] != true, \\\"Already created\\\");\\n\\t\\t_createdInvoices[_hash] = true;\\n\\n\\t\\treturn (invoiceData, _hash);\\n\\t}\\n\\n\\tfunction createInvoice(InvoiceData memory invoiceData)\\n\\t\\texternal\\n\\t\\tonlyPayee\\n\\t\\treturns (\\n\\t\\t\\tInvoiceData memory returnedInvoice,\\n\\t\\t\\tbytes32 _hash,\\n\\t\\t\\tuint256 _nonce\\n\\t\\t)\\n\\t{\\n\\t\\t(returnedInvoice, _hash) = _createInvoice(invoiceData);\\n\\t\\t_nonce = nonce;\\n\\t\\temit InvoiceCreated(returnedInvoice, _hash, _nonce);\\n\\t}\\n\\n\\tfunction _executeInvoice(InvoiceData memory invoiceData) internal {\\n\\t\\tbytes32 _hash = keccak256(abi.encode(invoiceData));\\n\\n\\t\\trequire(_createdInvoices[_hash], \\\"Invoice not found\\\");\\n\\n\\t\\t(bool inRange, uint256 start) = isInRange(\\n\\t\\t\\tinvoiceData.startingTime,\\n\\t\\t\\tinvoiceData.frequency,\\n\\t\\t\\tinvoiceData.durationForRetiresBeforeFailure,\\n\\t\\t\\tinvoiceData.expiry\\n\\t\\t);\\n\\t\\trequire(inRange, \\\"Cannot execute. Not in range\\\");\\n\\t\\trequire(_paidInvoices[_hash][start] == false, \\\"Already paid\\\");\\n\\t\\trequire(cancelledInvoices[invoiceData.paymentNonce] != true, \\\"Cancelled invoice\\\");\\n\\t\\t(uint256 pending, uint256 fee) = feePercentOfX(invoiceData.amount);\\n\\t\\t_paidInvoices[_hash][start] = true;\\n\\t\\tIERC20Upgradeable(invoiceData.currency).safeTransferFrom(invoiceData.payer, invoiceData.payee, pending);\\n\\t\\tIERC20Upgradeable(invoiceData.currency).safeTransferFrom(invoiceData.payer, address(this), fee);\\n\\n\\t\\temit ExecuteInvoice(invoiceData, start);\\n\\t}\\n\\n\\tfunction _executeInvoiceWithSignature(InvoiceData memory invoiceData, bytes memory signature) internal {\\n\\t\\trequire(verifySignature(invoiceData, signature), \\\"Signature verification failed\\\");\\n\\t\\t_executeInvoice(invoiceData);\\n\\t}\\n\\n\\tfunction execute(InvoiceData memory invoiceData, bytes memory signature) external override {\\n\\t\\trequire(_msgSender() == EXECUTOR_CONTRACT, \\\"Only executor contract\\\");\\n\\t\\t_executeInvoiceWithSignature(invoiceData, signature);\\n\\t}\\n\\n\\tevent InvoiceCreated(InvoiceData invoiceData, bytes32 _hash, uint256 _nonce);\\n\\n\\tfunction setFeePercent(uint256 _feePercent) external onlyAdmin {\\n\\t\\trequire(_feePercent < 100 && _feePercent > 0, \\\"Out of range\\\");\\n\\t\\tfeePercent = _feePercent;\\n\\t\\temit SetFeePercent(feePercent);\\n\\t}\\n\\n\\tfunction setCurrency(IERC20Upgradeable[] memory _currencies, bool enabled) external onlyAdmin {\\n\\t\\tfor (uint256 index = 0; index < _currencies.length; index++) {\\n\\t\\t\\tcurrencies[_currencies[index]] = enabled;\\n\\t\\t\\temit SetCurrency(_currencies[index], enabled);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction whitelistPayee(address[] memory _payees, bool enabled) external onlyAdmin {\\n\\t\\tfor (uint256 index = 0; index < _payees.length; index++) {\\n\\t\\t\\tpayees[_payees[index]] = enabled;\\n\\t\\t\\temit SetPayee(_payees[index], enabled);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction feePercentOfX(uint256 X) internal view returns (uint256 pending, uint256 fee) {\\n\\t\\t// _feePercent is always greater than 0 and less than 100\\n\\t\\tfee = ((X * 100) * feePercent) / (100 * 100);\\n\\t\\tpending = X - fee;\\n\\t}\\n\\n\\tmodifier onlyPayee() {\\n\\t\\trequire(payees[_msgSender()], \\\"Caller is not payee.\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction verifySignature(InvoiceData memory invoiceData, bytes memory signature) public view returns (bool) {\\n\\t\\tbytes32 hash = keccak256(abi.encode(invoiceData));\\n\\t\\treturn\\n\\t\\t\\tSignatureCheckerUpgradeable.isValidSignatureNow(\\n\\t\\t\\t\\tinvoiceData.payer,\\n\\t\\t\\t\\tECDSAUpgradeable.toEthSignedMessageHash(hash),\\n\\t\\t\\t\\tsignature\\n\\t\\t\\t);\\n\\t}\\n\\n\\tfunction setExecutorContract(address _EXECUTOR_CONTRACT) external onlyAdmin {\\n\\t\\tEXECUTOR_CONTRACT = _EXECUTOR_CONTRACT;\\n\\t\\temit SetExecutorContract(EXECUTOR_CONTRACT);\\n\\t}\\n\\n\\tevent SetPayee(address payee, bool enabled);\\n\\tevent SetCurrency(IERC20Upgradeable payee, bool enabled);\\n\\tevent SetFeePercent(uint256 _feePercent);\\n\\tevent SetExecutorContract(address EXECUTOR_CONTRACT);\\n\\tevent ExecuteInvoice(InvoiceData invoiceData, uint256 start);\\n}\\n\",\"keccak256\":\"0x523276fa96376cec7f49654b38b8ca25bfbafaaaceeea41346029310c9a74069\",\"license\":\"SEE LICENSE IN LICENSE\"},\"contracts/utils/AbstractAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: SEE LICENSE IN LICENSE\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\\\";\\n\\nabstract contract AbstractAccessControl is\\n\\tOwnableUpgradeable,\\n\\tReentrancyGuardUpgradeable\\n{\\n\\tmapping(address => bool) private _admins;\\n\\n\\tfunction init() internal onlyInitializing {\\n\\t\\t__Ownable_init();\\n\\t\\t__ReentrancyGuard_init();\\n\\t}\\n\\n\\tfunction isAdmin(address user) public view returns (bool) {\\n\\t\\treturn _admins[user];\\n\\t}\\n\\n\\tmodifier onlyAdmin() {\\n\\t\\trequire(\\n\\t\\t\\tisAdmin(_msgSender()) || owner() == _msgSender(),\\n\\t\\t\\t\\\"Caller is not admin\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t}\\n}\\n\",\"keccak256\":\"0xb0e9d806968041bfb973a0fb2bdd7735e9a43bb0a39dcf4beaaeb8f15ca95a5a\",\"license\":\"SEE LICENSE IN LICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061417e806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806383021728116100ad578063c623cabe11610071578063c623cabe14610308578063d2f4e74e14610326578063f2fde38b14610344578063f33f359c14610360578063fc21dead1461037c57610121565b806383021728146102645780638da5cb5b1461029457806397dc7556146102b2578063affed0e0146102ce578063c4d66de8146102ec57610121565b80636036cba3116100f45780636036cba3146101be578063715018a6146101ee57806371c3a60b146101f85780637ce3489b1461022a5780637fd6f15c1461024657610121565b8063247db6631461012657806324d7806c14610142578063310441fa146101725780635796c71c146101a2575b600080fd5b610140600480360381019061013b91906128d9565b6103ac565b005b61015c60048036038101906101579190612850565b610527565b6040516101699190613143565b60405180910390f35b61018c60048036038101906101879190612850565b61057d565b6040516101999190613143565b60405180910390f35b6101bc60048036038101906101b791906129ea565b61059d565b005b6101d860048036038101906101d3919061298f565b610642565b6040516101e59190613143565b60405180910390f35b6101f6610662565b005b610212600480360381019061020d91906129bc565b610676565b6040516102219392919061357f565b60405180910390f35b610244600480360381019061023f9190612a48565b61076c565b005b61024e610891565b60405161025b91906135e4565b60405180910390f35b61027e600480360381019061027991906129ea565b610897565b60405161028b9190613143565b60405180910390f35b61029c6108e3565b6040516102a991906130c8565b60405180910390f35b6102cc60048036038101906102c7919061287d565b61090d565b005b6102d6610a88565b6040516102e391906135e4565b60405180910390f35b61030660048036038101906103019190612850565b610a8e565b005b610310610ddf565b60405161031d9190613217565b60405180910390f35b61032e610e6d565b60405161033b91906130c8565b60405180910390f35b61035e60048036038101906103599190612850565b610e93565b005b61037a60048036038101906103759190612850565b610f17565b005b61039660048036038101906103919190612a48565b611047565b6040516103a39190613143565b60405180910390f35b6103bc6103b7611067565b610527565b8061040057506103ca611067565b73ffffffffffffffffffffffffffffffffffffffff166103e86108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b61043f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610436906133c3565b60405180910390fd5b60005b8251811015610522578160a0600085848151811061046357610462613b02565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f98c0c4bde5f642566cdaebfb7cd2cdc72a98bc7f3440e38c19e1d58d92388d348382815181106104f0576104ef613b02565b5b6020026020010151836040516105079291906131d3565b60405180910390a1808061051a906139c2565b915050610442565b505050565b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b609f6020528060005260406000206000915054906101000a900460ff1681565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105de611067565b73ffffffffffffffffffffffffffffffffffffffff1614610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613363565b60405180910390fd5b61063e828261106f565b5050565b60a06020528060005260406000206000915054906101000a900460ff1681565b61066a6110c5565b6106746000611143565b565b61067e6123b9565b600080609f600061068d611067565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b90613303565b60405180910390fd5b61071d84611209565b809350819450505060a15490507ffd530febd28afa22a61e317d9ac622adc9a1d16eecb7b8df77d00f19cc4dc70683838360405161075d9392919061357f565b60405180910390a19193909250565b61077c610777611067565b610527565b806107c0575061078a611067565b73ffffffffffffffffffffffffffffffffffffffff166107a86108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b6107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f6906133c3565b60405180910390fd5b60648110801561080f5750600081115b61084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590613403565b60405180910390fd5b80609a819055507f54b9dbb1167ce9a1e141b9c71f73394e64bf53da85077b4bcdcff626ba943f58609a5460405161088691906135e4565b60405180910390a150565b609a5481565b600080836040516020016108ab9190613563565b6040516020818303038152906040528051906020012090506108da84602001516108d4836115ac565b856115dc565b91505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61091d610918611067565b610527565b80610961575061092b611067565b73ffffffffffffffffffffffffffffffffffffffff166109496108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b6109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610997906133c3565b60405180910390fd5b60005b8251811015610a835781609f60008584815181106109c4576109c3613b02565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd23249e66bcd36732dfc58e0713ce7e15bd57a8fe27ce72dffa3035ccfa7ce5d838281518110610a5157610a50613b02565b5b602002602001015183604051610a6892919061311a565b60405180910390a18080610a7b906139c2565b9150506109a3565b505050565b60a15481565b60008060019054906101000a900460ff16159050808015610abf5750600160008054906101000a900460ff1660ff16105b80610aec5750610ace306117c1565b158015610aeb5750600160008054906101000a900460ff1660ff16145b5b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290613343565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b68576001600060016101000a81548160ff0219169083151502179055505b610b706117e4565b6040518060400160405280600881526020017f504249542d41505000000000000000000000000000000000000000000000000081525060989080519060200190610bbb929190612463565b50600a609a819055506000609b6000806005811115610bdd57610bdc613aa4565b5b6005811115610bef57610bee613aa4565b5b81526020019081526020016000208190555062015180609b600060016005811115610c1d57610c1c613aa4565b5b6005811115610c2f57610c2e613aa4565b5b81526020019081526020016000208190555062093a80609b600060026005811115610c5d57610c5c613aa4565b5b6005811115610c6f57610c6e613aa4565b5b81526020019081526020016000208190555062278d00609b600060036005811115610c9d57610c9c613aa4565b5b6005811115610caf57610cae613aa4565b5b81526020019081526020016000208190555062ed4e00609b600060046005811115610cdd57610cdc613aa4565b5b6005811115610cef57610cee613aa4565b5b8152602001908152602001600020819055506301e13380609b6000600580811115610d1d57610d1c613aa4565b5b6005811115610d2f57610d2e613aa4565b5b81526020019081526020016000208190555081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610ddb5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610dd291906131fc565b60405180910390a15b5050565b60988054610dec9061395f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e189061395f565b8015610e655780601f10610e3a57610100808354040283529160200191610e65565b820191906000526020600020905b815481529060010190602001808311610e4857829003601f168201915b505050505081565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e9b6110c5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290613283565b60405180910390fd5b610f1481611143565b50565b610f27610f22611067565b610527565b80610f6b5750610f35611067565b73ffffffffffffffffffffffffffffffffffffffff16610f536108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b610faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa1906133c3565b60405180910390fd5b80609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f231035407135f49527a72d623317b2b898063c809b7813691fdee67a5135c2f4609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161103c91906130c8565b60405180910390a150565b609e6020528060005260406000206000915054906101000a900460ff1681565b600033905090565b6110798282610897565b6110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af906133e3565b60405180910390fd5b6110c182611845565b5050565b6110cd611067565b73ffffffffffffffffffffffffffffffffffffffff166110eb6108e3565b73ffffffffffffffffffffffffffffffffffffffff1614611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890613383565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112116123b9565b600080836040015111611259576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611250906133a3565b60405180910390fd5b609f6000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e0906134e3565b60405180910390fd5b60a06000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090613323565b60405180910390fd5b610e10426113879190613710565b8360a0015110156113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c490613543565b60405180910390fd5b8260a001518360e001511180156113fa5750620151808360a001518460e001516113f791906137f1565b10155b611439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143090613483565b60405180910390fd5b61a8c08360c001511015611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906132a3565b60405180910390fd5b600160a160008282546114959190613710565b9250508190555060986114a960a154611b18565b6040516020016114ba929190613239565b604051602081830303815290604052805190602001208361012001818152505060a15483610100018181525050826040516020016114f89190613563565b60405160208183030381529060405280519060200120905060011515609c600083815260200190815260200160002060009054906101000a900460ff1615151415611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f90613503565b60405180910390fd5b6001609c600083815260200190815260200160002060006101000a81548160ff021916908315150217905550829150915091565b6000816040516020016115bf91906130a2565b604051602081830303815290604052805190602001209050919050565b60008060006115eb8585611c79565b915091506000600481111561160357611602613aa4565b5b81600481111561161657611615613aa4565b5b14801561164e57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561165e576001925050506117ba565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b888860405160240161169392919061315e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116fd919061308b565b600060405180830381855afa9150503d8060008114611738576040519150601f19603f3d011682016040523d82523d6000602084013e61173d565b606091505b5091509150818015611750575060208151145b80156117b35750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906117929190612962565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9450505050505b9392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182a90613463565b60405180910390fd5b61183b611cfc565b611843611d55565b565b6000816040516020016118589190613563565b604051602081830303815290604052805190602001209050609c600082815260200190815260200160002060009054906101000a900460ff166118d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c790613523565b60405180910390fd5b6000806118ef8460a0015185608001518660c001518760e00151611dae565b9150915081611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a906134a3565b60405180910390fd5b60001515609d6000858152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a2906132c3565b60405180910390fd5b60011515609e6000866101000151815260200190815260200160002060009054906101000a900460ff1615151415611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f90613443565b60405180910390fd5b600080611a288660400151611e71565b915091506001609d6000878152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550611aa28660200151876000015184896060015173ffffffffffffffffffffffffffffffffffffffff16611eb0909392919063ffffffff16565b611ad786602001513083896060015173ffffffffffffffffffffffffffffffffffffffff16611eb0909392919063ffffffff16565b7f51d7e02f1a2aa96fe359b2ff5f854d457bc0064457e7805b71eaf2418b1c8b728684604051611b089291906135b9565b60405180910390a1505050505050565b60606000821415611b60576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611c74565b600082905060005b60008214611b92578080611b7b906139c2565b915050600a82611b8b9190613766565b9150611b68565b60008167ffffffffffffffff811115611bae57611bad613b31565b5b6040519080825280601f01601f191660200182016040528015611be05781602001600182028036833780820191505090505b5090505b60008514611c6d57600182611bf991906137f1565b9150600a85611c089190613a15565b6030611c149190613710565b60f81b818381518110611c2a57611c29613b02565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611c669190613766565b9450611be4565b8093505050505b919050565b600080604183511415611cbb5760008060006020860151925060408601519150606086015160001a9050611caf87828585611f39565b94509450505050611cf5565b604083511415611cec576000806020850151915060408501519050611ce1868383612046565b935093505050611cf5565b60006002915091505b9250929050565b600060019054906101000a900460ff16611d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4290613463565b60405180910390fd5b611d536120a5565b565b600060019054906101000a900460ff16611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b90613463565b60405180910390fd5b611dac612106565b565b600080600086905060008582611dc49190613710565b90505b84811015611e5e57609b6000886005811115611de657611de5613aa4565b5b6005811115611df857611df7613aa4565b5b81526020019081526020016000205482611e129190613710565b91508582611e209190613710565b90508142118015611e3057508481105b15611e4357600182935093505050611e68565b42821115611e5957600080935093505050611e68565b611dc7565b6000809350935050505b94509492505050565b600080612710609a54606485611e879190613797565b611e919190613797565b611e9b9190613766565b90508083611ea991906137f1565b9150915091565b611f33846323b872dd60e01b858585604051602401611ed1939291906130e3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061215f565b50505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611f7457600060039150915061203d565b601b8560ff1614158015611f8c5750601c8560ff1614155b15611f9e57600060049150915061203d565b600060018787878760405160008152602001604052604051611fc3949392919061318e565b6020604051602081039080840390855afa158015611fe5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120345760006001925092505061203d565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6120899190613710565b905061209787828885611f39565b935093505050935093915050565b600060019054906101000a900460ff166120f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120eb90613463565b60405180910390fd5b6121046120ff611067565b611143565b565b600060019054906101000a900460ff16612155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214c90613463565b60405180910390fd5b6001606581905550565b60006121c1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122269092919063ffffffff16565b905060008151111561222157808060200190518101906121e19190612935565b612220576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612217906134c3565b60405180910390fd5b5b505050565b6060612235848460008561223e565b90509392505050565b606082471015612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a906132e3565b60405180910390fd5b61228c856117c1565b6122cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c290613423565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122f4919061308b565b60006040518083038185875af1925050503d8060008114612331576040519150601f19603f3d011682016040523d82523d6000602084013e612336565b606091505b5091509150612346828286612352565b92505050949350505050565b60608315612362578290506123b2565b6000835111156123755782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a99190613217565b60405180910390fd5b9392505050565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600581111561243757612436613aa4565b5b815260200160008152602001600081526020016000815260200160008152602001600080191681525090565b82805461246f9061395f565b90600052602060002090601f01602090048101928261249157600085556124d8565b82601f106124aa57805160ff19168380011785556124d8565b828001600101855582156124d8579182015b828111156124d75782518255916020019190600101906124bc565b5b5090506124e591906124e9565b5090565b5b808211156125025760008160009055506001016124ea565b5090565b600061251961251484613624565b6135ff565b9050808382526020820190508285602086028201111561253c5761253b613b6a565b5b60005b8581101561256c57816125528882612628565b84526020840193506020830192505060018101905061253f565b5050509392505050565b600061258961258484613650565b6135ff565b905080838252602082019050828560208602820111156125ac576125ab613b6a565b5b60005b858110156125dc57816125c2888261271b565b8452602084019350602083019250506001810190506125af565b5050509392505050565b60006125f96125f48461367c565b6135ff565b90508281526020810184848401111561261557612614613b6f565b5b61262084828561391d565b509392505050565b600081359050612637816140ae565b92915050565b600082601f83011261265257612651613b60565b5b8135612662848260208601612506565b91505092915050565b600082601f8301126126805761267f613b60565b5b8135612690848260208601612576565b91505092915050565b6000813590506126a8816140c5565b92915050565b6000815190506126bd816140c5565b92915050565b6000813590506126d2816140dc565b92915050565b6000815190506126e7816140f3565b92915050565b600082601f83011261270257612701613b60565b5b81356127128482602086016125e6565b91505092915050565b60008135905061272a8161410a565b92915050565b60008135905061273f81614121565b92915050565b6000610140828403121561275c5761275b613b65565b5b6127676101406135ff565b9050600061277784828501612628565b600083015250602061278b84828501612628565b602083015250604061279f8482850161283b565b60408301525060606127b384828501612628565b60608301525060806127c784828501612730565b60808301525060a06127db8482850161283b565b60a08301525060c06127ef8482850161283b565b60c08301525060e06128038482850161283b565b60e0830152506101006128188482850161283b565b6101008301525061012061282e848285016126c3565b6101208301525092915050565b60008135905061284a81614131565b92915050565b60006020828403121561286657612865613b79565b5b600061287484828501612628565b91505092915050565b6000806040838503121561289457612893613b79565b5b600083013567ffffffffffffffff8111156128b2576128b1613b74565b5b6128be8582860161263d565b92505060206128cf85828601612699565b9150509250929050565b600080604083850312156128f0576128ef613b79565b5b600083013567ffffffffffffffff81111561290e5761290d613b74565b5b61291a8582860161266b565b925050602061292b85828601612699565b9150509250929050565b60006020828403121561294b5761294a613b79565b5b6000612959848285016126ae565b91505092915050565b60006020828403121561297857612977613b79565b5b6000612986848285016126d8565b91505092915050565b6000602082840312156129a5576129a4613b79565b5b60006129b38482850161271b565b91505092915050565b600061014082840312156129d3576129d2613b79565b5b60006129e184828501612745565b91505092915050565b6000806101608385031215612a0257612a01613b79565b5b6000612a1085828601612745565b92505061014083013567ffffffffffffffff811115612a3257612a31613b74565b5b612a3e858286016126ed565b9150509250929050565b600060208284031215612a5e57612a5d613b79565b5b6000612a6c8482850161283b565b91505092915050565b612a7e81613825565b82525050565b612a8d81613825565b82525050565b612a9c81613837565b82525050565b612aab81613843565b82525050565b612aba81613843565b82525050565b612ad1612acc82613843565b613a0b565b82525050565b6000612ae2826136c2565b612aec81856136d8565b9350612afc81856020860161392c565b612b0581613b7e565b840191505092915050565b6000612b1b826136c2565b612b2581856136e9565b9350612b3581856020860161392c565b80840191505092915050565b612b4a816138d5565b82525050565b612b59816138f9565b82525050565b612b688161390b565b82525050565b6000612b79826136cd565b612b8381856136f4565b9350612b9381856020860161392c565b612b9c81613b7e565b840191505092915050565b60008154612bb48161395f565b612bbe81866136f4565b94506001821660008114612bd95760018114612beb57612c1e565b60ff1983168652602086019350612c1e565b612bf4856136ad565b60005b83811015612c1657815481890152600182019150602081019050612bf7565b808801955050505b50505092915050565b6000612c34601c83613705565b9150612c3f82613b8f565b601c82019050919050565b6000612c576026836136f4565b9150612c6282613bb8565b604082019050919050565b6000612c7a6034836136f4565b9150612c8582613c07565b604082019050919050565b6000612c9d600c836136f4565b9150612ca882613c56565b602082019050919050565b6000612cc06026836136f4565b9150612ccb82613c7f565b604082019050919050565b6000612ce36014836136f4565b9150612cee82613cce565b602082019050919050565b6000612d066014836136f4565b9150612d1182613cf7565b602082019050919050565b6000612d29602e836136f4565b9150612d3482613d20565b604082019050919050565b6000612d4c6016836136f4565b9150612d5782613d6f565b602082019050919050565b6000612d6f6020836136f4565b9150612d7a82613d98565b602082019050919050565b6000612d926012836136f4565b9150612d9d82613dc1565b602082019050919050565b6000612db56013836136f4565b9150612dc082613dea565b602082019050919050565b6000612dd8601d836136f4565b9150612de382613e13565b602082019050919050565b6000612dfb600c836136f4565b9150612e0682613e3c565b602082019050919050565b6000612e1e601d836136f4565b9150612e2982613e65565b602082019050919050565b6000612e416001836136f4565b9150612e4c82613e8e565b602082019050919050565b6000612e646011836136f4565b9150612e6f82613eb7565b602082019050919050565b6000612e87602b836136f4565b9150612e9282613ee0565b604082019050919050565b6000612eaa6026836136f4565b9150612eb582613f2f565b604082019050919050565b6000612ecd601c836136f4565b9150612ed882613f7e565b602082019050919050565b6000612ef0602a836136f4565b9150612efb82613fa7565b604082019050919050565b6000612f13600b836136f4565b9150612f1e82613ff6565b602082019050919050565b6000612f36600f836136f4565b9150612f418261401f565b602082019050919050565b6000612f596011836136f4565b9150612f6482614048565b602082019050919050565b6000612f7c6020836136f4565b9150612f8782614071565b602082019050919050565b61014082016000820151612fa96000850182612a75565b506020820151612fbc6020850182612a75565b506040820151612fcf604085018261305e565b506060820151612fe26060850182612a75565b506080820151612ff56080850182612b50565b5060a082015161300860a085018261305e565b5060c082015161301b60c085018261305e565b5060e082015161302e60e085018261305e565b5061010082015161304361010085018261305e565b50610120820151613058610120850182612aa2565b50505050565b613067816138be565b82525050565b613076816138be565b82525050565b613085816138c8565b82525050565b60006130978284612b10565b915081905092915050565b60006130ad82612c27565b91506130b98284612ac0565b60208201915081905092915050565b60006020820190506130dd6000830184612a84565b92915050565b60006060820190506130f86000830186612a84565b6131056020830185612a84565b613112604083018461306d565b949350505050565b600060408201905061312f6000830185612a84565b61313c6020830184612a93565b9392505050565b60006020820190506131586000830184612a93565b92915050565b60006040820190506131736000830185612ab1565b81810360208301526131858184612ad7565b90509392505050565b60006080820190506131a36000830187612ab1565b6131b0602083018661307c565b6131bd6040830185612ab1565b6131ca6060830184612ab1565b95945050505050565b60006040820190506131e86000830185612b41565b6131f56020830184612a93565b9392505050565b60006020820190506132116000830184612b5f565b92915050565b600060208201905081810360008301526132318184612b6e565b905092915050565b600060608201905081810360008301526132538185612ba7565b9050818103602083015261326681612e34565b9050818103604083015261327a8184612b6e565b90509392505050565b6000602082019050818103600083015261329c81612c4a565b9050919050565b600060208201905081810360008301526132bc81612c6d565b9050919050565b600060208201905081810360008301526132dc81612c90565b9050919050565b600060208201905081810360008301526132fc81612cb3565b9050919050565b6000602082019050818103600083015261331c81612cd6565b9050919050565b6000602082019050818103600083015261333c81612cf9565b9050919050565b6000602082019050818103600083015261335c81612d1c565b9050919050565b6000602082019050818103600083015261337c81612d3f565b9050919050565b6000602082019050818103600083015261339c81612d62565b9050919050565b600060208201905081810360008301526133bc81612d85565b9050919050565b600060208201905081810360008301526133dc81612da8565b9050919050565b600060208201905081810360008301526133fc81612dcb565b9050919050565b6000602082019050818103600083015261341c81612dee565b9050919050565b6000602082019050818103600083015261343c81612e11565b9050919050565b6000602082019050818103600083015261345c81612e57565b9050919050565b6000602082019050818103600083015261347c81612e7a565b9050919050565b6000602082019050818103600083015261349c81612e9d565b9050919050565b600060208201905081810360008301526134bc81612ec0565b9050919050565b600060208201905081810360008301526134dc81612ee3565b9050919050565b600060208201905081810360008301526134fc81612f06565b9050919050565b6000602082019050818103600083015261351c81612f29565b9050919050565b6000602082019050818103600083015261353c81612f4c565b9050919050565b6000602082019050818103600083015261355c81612f6f565b9050919050565b6000610140820190506135796000830184612f92565b92915050565b6000610180820190506135956000830186612f92565b6135a3610140830185612ab1565b6135b161016083018461306d565b949350505050565b6000610160820190506135cf6000830185612f92565b6135dd61014083018461306d565b9392505050565b60006020820190506135f9600083018461306d565b92915050565b600061360961361a565b90506136158282613991565b919050565b6000604051905090565b600067ffffffffffffffff82111561363f5761363e613b31565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561366b5761366a613b31565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561369757613696613b31565b5b6136a082613b7e565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061371b826138be565b9150613726836138be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561375b5761375a613a46565b5b828201905092915050565b6000613771826138be565b915061377c836138be565b92508261378c5761378b613a75565b5b828204905092915050565b60006137a2826138be565b91506137ad836138be565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137e6576137e5613a46565b5b828202905092915050565b60006137fc826138be565b9150613807836138be565b92508282101561381a57613819613a46565b5b828203905092915050565b60006138308261389e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061388482613825565b9050919050565b60008190506138998261409a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006138e0826138e7565b9050919050565b60006138f28261389e565b9050919050565b60006139048261388b565b9050919050565b6000613916826138c8565b9050919050565b82818337600083830152505050565b60005b8381101561394a57808201518184015260208101905061392f565b83811115613959576000848401525b50505050565b6000600282049050600182168061397757607f821691505b6020821081141561398b5761398a613ad3565b5b50919050565b61399a82613b7e565b810181811067ffffffffffffffff821117156139b9576139b8613b31565b5b80604052505050565b60006139cd826138be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a00576139ff613a46565b5b600182019050919050565b6000819050919050565b6000613a20826138be565b9150613a2b836138be565b925082613a3b57613a3a613a75565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4475726174696f6e20666f7220726574726965732073686f756c64206265206760008201527f726561746572207468616e20313220686f757273000000000000000000000000602082015250565b7f416c726561647920706169640000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742070617965652e000000000000000000000000600082015250565b7f4e6f7420612076616c69642063757272656e6379000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f6e6c79206578656375746f7220636f6e747261637400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416d6f756e742063616e6e6f7420626520300000000000000000000000000000600082015250565b7f43616c6c6572206973206e6f742061646d696e00000000000000000000000000600082015250565b7f5369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b7f4f7574206f662072616e67650000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f43616e63656c6c656420696e766f696365000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f4578706972792073686f756c642062652067726561746572207468616e20323460008201527f20686f7572730000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420657865637574652e204e6f7420696e2072616e676500000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4e6f742061207061796565000000000000000000000000000000000000000000600082015250565b7f416c726561647920637265617465640000000000000000000000000000000000600082015250565b7f496e766f696365206e6f7420666f756e64000000000000000000000000000000600082015250565b7f496e766f69636520746f6f20736f6f6e2e2043616e6e6f742070726f63657373600082015250565b600681106140ab576140aa613aa4565b5b50565b6140b781613825565b81146140c257600080fd5b50565b6140ce81613837565b81146140d957600080fd5b50565b6140e581613843565b81146140f057600080fd5b50565b6140fc8161384d565b811461410757600080fd5b50565b61411381613879565b811461411e57600080fd5b50565b6006811061412e57600080fd5b50565b61413a816138be565b811461414557600080fd5b5056fea2646970667358221220afddc2ce8dc84ebdc111eaf08d11a9935dcd4363cceffd0ae7443f07690dc4a464736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806383021728116100ad578063c623cabe11610071578063c623cabe14610308578063d2f4e74e14610326578063f2fde38b14610344578063f33f359c14610360578063fc21dead1461037c57610121565b806383021728146102645780638da5cb5b1461029457806397dc7556146102b2578063affed0e0146102ce578063c4d66de8146102ec57610121565b80636036cba3116100f45780636036cba3146101be578063715018a6146101ee57806371c3a60b146101f85780637ce3489b1461022a5780637fd6f15c1461024657610121565b8063247db6631461012657806324d7806c14610142578063310441fa146101725780635796c71c146101a2575b600080fd5b610140600480360381019061013b91906128d9565b6103ac565b005b61015c60048036038101906101579190612850565b610527565b6040516101699190613143565b60405180910390f35b61018c60048036038101906101879190612850565b61057d565b6040516101999190613143565b60405180910390f35b6101bc60048036038101906101b791906129ea565b61059d565b005b6101d860048036038101906101d3919061298f565b610642565b6040516101e59190613143565b60405180910390f35b6101f6610662565b005b610212600480360381019061020d91906129bc565b610676565b6040516102219392919061357f565b60405180910390f35b610244600480360381019061023f9190612a48565b61076c565b005b61024e610891565b60405161025b91906135e4565b60405180910390f35b61027e600480360381019061027991906129ea565b610897565b60405161028b9190613143565b60405180910390f35b61029c6108e3565b6040516102a991906130c8565b60405180910390f35b6102cc60048036038101906102c7919061287d565b61090d565b005b6102d6610a88565b6040516102e391906135e4565b60405180910390f35b61030660048036038101906103019190612850565b610a8e565b005b610310610ddf565b60405161031d9190613217565b60405180910390f35b61032e610e6d565b60405161033b91906130c8565b60405180910390f35b61035e60048036038101906103599190612850565b610e93565b005b61037a60048036038101906103759190612850565b610f17565b005b61039660048036038101906103919190612a48565b611047565b6040516103a39190613143565b60405180910390f35b6103bc6103b7611067565b610527565b8061040057506103ca611067565b73ffffffffffffffffffffffffffffffffffffffff166103e86108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b61043f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610436906133c3565b60405180910390fd5b60005b8251811015610522578160a0600085848151811061046357610462613b02565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f98c0c4bde5f642566cdaebfb7cd2cdc72a98bc7f3440e38c19e1d58d92388d348382815181106104f0576104ef613b02565b5b6020026020010151836040516105079291906131d3565b60405180910390a1808061051a906139c2565b915050610442565b505050565b6000609760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b609f6020528060005260406000206000915054906101000a900460ff1681565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166105de611067565b73ffffffffffffffffffffffffffffffffffffffff1614610634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062b90613363565b60405180910390fd5b61063e828261106f565b5050565b60a06020528060005260406000206000915054906101000a900460ff1681565b61066a6110c5565b6106746000611143565b565b61067e6123b9565b600080609f600061068d611067565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b90613303565b60405180910390fd5b61071d84611209565b809350819450505060a15490507ffd530febd28afa22a61e317d9ac622adc9a1d16eecb7b8df77d00f19cc4dc70683838360405161075d9392919061357f565b60405180910390a19193909250565b61077c610777611067565b610527565b806107c0575061078a611067565b73ffffffffffffffffffffffffffffffffffffffff166107a86108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b6107ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f6906133c3565b60405180910390fd5b60648110801561080f5750600081115b61084e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084590613403565b60405180910390fd5b80609a819055507f54b9dbb1167ce9a1e141b9c71f73394e64bf53da85077b4bcdcff626ba943f58609a5460405161088691906135e4565b60405180910390a150565b609a5481565b600080836040516020016108ab9190613563565b6040516020818303038152906040528051906020012090506108da84602001516108d4836115ac565b856115dc565b91505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61091d610918611067565b610527565b80610961575061092b611067565b73ffffffffffffffffffffffffffffffffffffffff166109496108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b6109a0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610997906133c3565b60405180910390fd5b60005b8251811015610a835781609f60008584815181106109c4576109c3613b02565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd23249e66bcd36732dfc58e0713ce7e15bd57a8fe27ce72dffa3035ccfa7ce5d838281518110610a5157610a50613b02565b5b602002602001015183604051610a6892919061311a565b60405180910390a18080610a7b906139c2565b9150506109a3565b505050565b60a15481565b60008060019054906101000a900460ff16159050808015610abf5750600160008054906101000a900460ff1660ff16105b80610aec5750610ace306117c1565b158015610aeb5750600160008054906101000a900460ff1660ff16145b5b610b2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2290613343565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610b68576001600060016101000a81548160ff0219169083151502179055505b610b706117e4565b6040518060400160405280600881526020017f504249542d41505000000000000000000000000000000000000000000000000081525060989080519060200190610bbb929190612463565b50600a609a819055506000609b6000806005811115610bdd57610bdc613aa4565b5b6005811115610bef57610bee613aa4565b5b81526020019081526020016000208190555062015180609b600060016005811115610c1d57610c1c613aa4565b5b6005811115610c2f57610c2e613aa4565b5b81526020019081526020016000208190555062093a80609b600060026005811115610c5d57610c5c613aa4565b5b6005811115610c6f57610c6e613aa4565b5b81526020019081526020016000208190555062278d00609b600060036005811115610c9d57610c9c613aa4565b5b6005811115610caf57610cae613aa4565b5b81526020019081526020016000208190555062ed4e00609b600060046005811115610cdd57610cdc613aa4565b5b6005811115610cef57610cee613aa4565b5b8152602001908152602001600020819055506301e13380609b6000600580811115610d1d57610d1c613aa4565b5b6005811115610d2f57610d2e613aa4565b5b81526020019081526020016000208190555081609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610ddb5760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610dd291906131fc565b60405180910390a15b5050565b60988054610dec9061395f565b80601f0160208091040260200160405190810160405280929190818152602001828054610e189061395f565b8015610e655780601f10610e3a57610100808354040283529160200191610e65565b820191906000526020600020905b815481529060010190602001808311610e4857829003601f168201915b505050505081565b609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610e9b6110c5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610f0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0290613283565b60405180910390fd5b610f1481611143565b50565b610f27610f22611067565b610527565b80610f6b5750610f35611067565b73ffffffffffffffffffffffffffffffffffffffff16610f536108e3565b73ffffffffffffffffffffffffffffffffffffffff16145b610faa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa1906133c3565b60405180910390fd5b80609960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f231035407135f49527a72d623317b2b898063c809b7813691fdee67a5135c2f4609960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161103c91906130c8565b60405180910390a150565b609e6020528060005260406000206000915054906101000a900460ff1681565b600033905090565b6110798282610897565b6110b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110af906133e3565b60405180910390fd5b6110c182611845565b5050565b6110cd611067565b73ffffffffffffffffffffffffffffffffffffffff166110eb6108e3565b73ffffffffffffffffffffffffffffffffffffffff1614611141576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113890613383565b60405180910390fd5b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6112116123b9565b600080836040015111611259576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611250906133a3565b60405180910390fd5b609f6000846000015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166112e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e0906134e3565b60405180910390fd5b60a06000846060015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137090613323565b60405180910390fd5b610e10426113879190613710565b8360a0015110156113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c490613543565b60405180910390fd5b8260a001518360e001511180156113fa5750620151808360a001518460e001516113f791906137f1565b10155b611439576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143090613483565b60405180910390fd5b61a8c08360c001511015611482576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611479906132a3565b60405180910390fd5b600160a160008282546114959190613710565b9250508190555060986114a960a154611b18565b6040516020016114ba929190613239565b604051602081830303815290604052805190602001208361012001818152505060a15483610100018181525050826040516020016114f89190613563565b60405160208183030381529060405280519060200120905060011515609c600083815260200190815260200160002060009054906101000a900460ff1615151415611578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161156f90613503565b60405180910390fd5b6001609c600083815260200190815260200160002060006101000a81548160ff021916908315150217905550829150915091565b6000816040516020016115bf91906130a2565b604051602081830303815290604052805190602001209050919050565b60008060006115eb8585611c79565b915091506000600481111561160357611602613aa4565b5b81600481111561161657611615613aa4565b5b14801561164e57508573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b1561165e576001925050506117ba565b6000808773ffffffffffffffffffffffffffffffffffffffff16631626ba7e60e01b888860405160240161169392919061315e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516116fd919061308b565b600060405180830381855afa9150503d8060008114611738576040519150601f19603f3d011682016040523d82523d6000602084013e61173d565b606091505b5091509150818015611750575060208151145b80156117b35750631626ba7e60e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916818060200190518101906117929190612962565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9450505050505b9392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16611833576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161182a90613463565b60405180910390fd5b61183b611cfc565b611843611d55565b565b6000816040516020016118589190613563565b604051602081830303815290604052805190602001209050609c600082815260200190815260200160002060009054906101000a900460ff166118d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c790613523565b60405180910390fd5b6000806118ef8460a0015185608001518660c001518760e00151611dae565b9150915081611933576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192a906134a3565b60405180910390fd5b60001515609d6000858152602001908152602001600020600083815260200190815260200160002060009054906101000a900460ff161515146119ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a2906132c3565b60405180910390fd5b60011515609e6000866101000151815260200190815260200160002060009054906101000a900460ff1615151415611a18576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0f90613443565b60405180910390fd5b600080611a288660400151611e71565b915091506001609d6000878152602001908152602001600020600085815260200190815260200160002060006101000a81548160ff021916908315150217905550611aa28660200151876000015184896060015173ffffffffffffffffffffffffffffffffffffffff16611eb0909392919063ffffffff16565b611ad786602001513083896060015173ffffffffffffffffffffffffffffffffffffffff16611eb0909392919063ffffffff16565b7f51d7e02f1a2aa96fe359b2ff5f854d457bc0064457e7805b71eaf2418b1c8b728684604051611b089291906135b9565b60405180910390a1505050505050565b60606000821415611b60576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611c74565b600082905060005b60008214611b92578080611b7b906139c2565b915050600a82611b8b9190613766565b9150611b68565b60008167ffffffffffffffff811115611bae57611bad613b31565b5b6040519080825280601f01601f191660200182016040528015611be05781602001600182028036833780820191505090505b5090505b60008514611c6d57600182611bf991906137f1565b9150600a85611c089190613a15565b6030611c149190613710565b60f81b818381518110611c2a57611c29613b02565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85611c669190613766565b9450611be4565b8093505050505b919050565b600080604183511415611cbb5760008060006020860151925060408601519150606086015160001a9050611caf87828585611f39565b94509450505050611cf5565b604083511415611cec576000806020850151915060408501519050611ce1868383612046565b935093505050611cf5565b60006002915091505b9250929050565b600060019054906101000a900460ff16611d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4290613463565b60405180910390fd5b611d536120a5565b565b600060019054906101000a900460ff16611da4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9b90613463565b60405180910390fd5b611dac612106565b565b600080600086905060008582611dc49190613710565b90505b84811015611e5e57609b6000886005811115611de657611de5613aa4565b5b6005811115611df857611df7613aa4565b5b81526020019081526020016000205482611e129190613710565b91508582611e209190613710565b90508142118015611e3057508481105b15611e4357600182935093505050611e68565b42821115611e5957600080935093505050611e68565b611dc7565b6000809350935050505b94509492505050565b600080612710609a54606485611e879190613797565b611e919190613797565b611e9b9190613766565b90508083611ea991906137f1565b9150915091565b611f33846323b872dd60e01b858585604051602401611ed1939291906130e3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061215f565b50505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611f7457600060039150915061203d565b601b8560ff1614158015611f8c5750601c8560ff1614155b15611f9e57600060049150915061203d565b600060018787878760405160008152602001604052604051611fc3949392919061318e565b6020604051602081039080840390855afa158015611fe5573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120345760006001925092505061203d565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6120899190613710565b905061209787828885611f39565b935093505050935093915050565b600060019054906101000a900460ff166120f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120eb90613463565b60405180910390fd5b6121046120ff611067565b611143565b565b600060019054906101000a900460ff16612155576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214c90613463565b60405180910390fd5b6001606581905550565b60006121c1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122269092919063ffffffff16565b905060008151111561222157808060200190518101906121e19190612935565b612220576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612217906134c3565b60405180910390fd5b5b505050565b6060612235848460008561223e565b90509392505050565b606082471015612283576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227a906132e3565b60405180910390fd5b61228c856117c1565b6122cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122c290613423565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516122f4919061308b565b60006040518083038185875af1925050503d8060008114612331576040519150601f19603f3d011682016040523d82523d6000602084013e612336565b606091505b5091509150612346828286612352565b92505050949350505050565b60608315612362578290506123b2565b6000835111156123755782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123a99190613217565b60405180910390fd5b9392505050565b604051806101400160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000600581111561243757612436613aa4565b5b815260200160008152602001600081526020016000815260200160008152602001600080191681525090565b82805461246f9061395f565b90600052602060002090601f01602090048101928261249157600085556124d8565b82601f106124aa57805160ff19168380011785556124d8565b828001600101855582156124d8579182015b828111156124d75782518255916020019190600101906124bc565b5b5090506124e591906124e9565b5090565b5b808211156125025760008160009055506001016124ea565b5090565b600061251961251484613624565b6135ff565b9050808382526020820190508285602086028201111561253c5761253b613b6a565b5b60005b8581101561256c57816125528882612628565b84526020840193506020830192505060018101905061253f565b5050509392505050565b600061258961258484613650565b6135ff565b905080838252602082019050828560208602820111156125ac576125ab613b6a565b5b60005b858110156125dc57816125c2888261271b565b8452602084019350602083019250506001810190506125af565b5050509392505050565b60006125f96125f48461367c565b6135ff565b90508281526020810184848401111561261557612614613b6f565b5b61262084828561391d565b509392505050565b600081359050612637816140ae565b92915050565b600082601f83011261265257612651613b60565b5b8135612662848260208601612506565b91505092915050565b600082601f8301126126805761267f613b60565b5b8135612690848260208601612576565b91505092915050565b6000813590506126a8816140c5565b92915050565b6000815190506126bd816140c5565b92915050565b6000813590506126d2816140dc565b92915050565b6000815190506126e7816140f3565b92915050565b600082601f83011261270257612701613b60565b5b81356127128482602086016125e6565b91505092915050565b60008135905061272a8161410a565b92915050565b60008135905061273f81614121565b92915050565b6000610140828403121561275c5761275b613b65565b5b6127676101406135ff565b9050600061277784828501612628565b600083015250602061278b84828501612628565b602083015250604061279f8482850161283b565b60408301525060606127b384828501612628565b60608301525060806127c784828501612730565b60808301525060a06127db8482850161283b565b60a08301525060c06127ef8482850161283b565b60c08301525060e06128038482850161283b565b60e0830152506101006128188482850161283b565b6101008301525061012061282e848285016126c3565b6101208301525092915050565b60008135905061284a81614131565b92915050565b60006020828403121561286657612865613b79565b5b600061287484828501612628565b91505092915050565b6000806040838503121561289457612893613b79565b5b600083013567ffffffffffffffff8111156128b2576128b1613b74565b5b6128be8582860161263d565b92505060206128cf85828601612699565b9150509250929050565b600080604083850312156128f0576128ef613b79565b5b600083013567ffffffffffffffff81111561290e5761290d613b74565b5b61291a8582860161266b565b925050602061292b85828601612699565b9150509250929050565b60006020828403121561294b5761294a613b79565b5b6000612959848285016126ae565b91505092915050565b60006020828403121561297857612977613b79565b5b6000612986848285016126d8565b91505092915050565b6000602082840312156129a5576129a4613b79565b5b60006129b38482850161271b565b91505092915050565b600061014082840312156129d3576129d2613b79565b5b60006129e184828501612745565b91505092915050565b6000806101608385031215612a0257612a01613b79565b5b6000612a1085828601612745565b92505061014083013567ffffffffffffffff811115612a3257612a31613b74565b5b612a3e858286016126ed565b9150509250929050565b600060208284031215612a5e57612a5d613b79565b5b6000612a6c8482850161283b565b91505092915050565b612a7e81613825565b82525050565b612a8d81613825565b82525050565b612a9c81613837565b82525050565b612aab81613843565b82525050565b612aba81613843565b82525050565b612ad1612acc82613843565b613a0b565b82525050565b6000612ae2826136c2565b612aec81856136d8565b9350612afc81856020860161392c565b612b0581613b7e565b840191505092915050565b6000612b1b826136c2565b612b2581856136e9565b9350612b3581856020860161392c565b80840191505092915050565b612b4a816138d5565b82525050565b612b59816138f9565b82525050565b612b688161390b565b82525050565b6000612b79826136cd565b612b8381856136f4565b9350612b9381856020860161392c565b612b9c81613b7e565b840191505092915050565b60008154612bb48161395f565b612bbe81866136f4565b94506001821660008114612bd95760018114612beb57612c1e565b60ff1983168652602086019350612c1e565b612bf4856136ad565b60005b83811015612c1657815481890152600182019150602081019050612bf7565b808801955050505b50505092915050565b6000612c34601c83613705565b9150612c3f82613b8f565b601c82019050919050565b6000612c576026836136f4565b9150612c6282613bb8565b604082019050919050565b6000612c7a6034836136f4565b9150612c8582613c07565b604082019050919050565b6000612c9d600c836136f4565b9150612ca882613c56565b602082019050919050565b6000612cc06026836136f4565b9150612ccb82613c7f565b604082019050919050565b6000612ce36014836136f4565b9150612cee82613cce565b602082019050919050565b6000612d066014836136f4565b9150612d1182613cf7565b602082019050919050565b6000612d29602e836136f4565b9150612d3482613d20565b604082019050919050565b6000612d4c6016836136f4565b9150612d5782613d6f565b602082019050919050565b6000612d6f6020836136f4565b9150612d7a82613d98565b602082019050919050565b6000612d926012836136f4565b9150612d9d82613dc1565b602082019050919050565b6000612db56013836136f4565b9150612dc082613dea565b602082019050919050565b6000612dd8601d836136f4565b9150612de382613e13565b602082019050919050565b6000612dfb600c836136f4565b9150612e0682613e3c565b602082019050919050565b6000612e1e601d836136f4565b9150612e2982613e65565b602082019050919050565b6000612e416001836136f4565b9150612e4c82613e8e565b602082019050919050565b6000612e646011836136f4565b9150612e6f82613eb7565b602082019050919050565b6000612e87602b836136f4565b9150612e9282613ee0565b604082019050919050565b6000612eaa6026836136f4565b9150612eb582613f2f565b604082019050919050565b6000612ecd601c836136f4565b9150612ed882613f7e565b602082019050919050565b6000612ef0602a836136f4565b9150612efb82613fa7565b604082019050919050565b6000612f13600b836136f4565b9150612f1e82613ff6565b602082019050919050565b6000612f36600f836136f4565b9150612f418261401f565b602082019050919050565b6000612f596011836136f4565b9150612f6482614048565b602082019050919050565b6000612f7c6020836136f4565b9150612f8782614071565b602082019050919050565b61014082016000820151612fa96000850182612a75565b506020820151612fbc6020850182612a75565b506040820151612fcf604085018261305e565b506060820151612fe26060850182612a75565b506080820151612ff56080850182612b50565b5060a082015161300860a085018261305e565b5060c082015161301b60c085018261305e565b5060e082015161302e60e085018261305e565b5061010082015161304361010085018261305e565b50610120820151613058610120850182612aa2565b50505050565b613067816138be565b82525050565b613076816138be565b82525050565b613085816138c8565b82525050565b60006130978284612b10565b915081905092915050565b60006130ad82612c27565b91506130b98284612ac0565b60208201915081905092915050565b60006020820190506130dd6000830184612a84565b92915050565b60006060820190506130f86000830186612a84565b6131056020830185612a84565b613112604083018461306d565b949350505050565b600060408201905061312f6000830185612a84565b61313c6020830184612a93565b9392505050565b60006020820190506131586000830184612a93565b92915050565b60006040820190506131736000830185612ab1565b81810360208301526131858184612ad7565b90509392505050565b60006080820190506131a36000830187612ab1565b6131b0602083018661307c565b6131bd6040830185612ab1565b6131ca6060830184612ab1565b95945050505050565b60006040820190506131e86000830185612b41565b6131f56020830184612a93565b9392505050565b60006020820190506132116000830184612b5f565b92915050565b600060208201905081810360008301526132318184612b6e565b905092915050565b600060608201905081810360008301526132538185612ba7565b9050818103602083015261326681612e34565b9050818103604083015261327a8184612b6e565b90509392505050565b6000602082019050818103600083015261329c81612c4a565b9050919050565b600060208201905081810360008301526132bc81612c6d565b9050919050565b600060208201905081810360008301526132dc81612c90565b9050919050565b600060208201905081810360008301526132fc81612cb3565b9050919050565b6000602082019050818103600083015261331c81612cd6565b9050919050565b6000602082019050818103600083015261333c81612cf9565b9050919050565b6000602082019050818103600083015261335c81612d1c565b9050919050565b6000602082019050818103600083015261337c81612d3f565b9050919050565b6000602082019050818103600083015261339c81612d62565b9050919050565b600060208201905081810360008301526133bc81612d85565b9050919050565b600060208201905081810360008301526133dc81612da8565b9050919050565b600060208201905081810360008301526133fc81612dcb565b9050919050565b6000602082019050818103600083015261341c81612dee565b9050919050565b6000602082019050818103600083015261343c81612e11565b9050919050565b6000602082019050818103600083015261345c81612e57565b9050919050565b6000602082019050818103600083015261347c81612e7a565b9050919050565b6000602082019050818103600083015261349c81612e9d565b9050919050565b600060208201905081810360008301526134bc81612ec0565b9050919050565b600060208201905081810360008301526134dc81612ee3565b9050919050565b600060208201905081810360008301526134fc81612f06565b9050919050565b6000602082019050818103600083015261351c81612f29565b9050919050565b6000602082019050818103600083015261353c81612f4c565b9050919050565b6000602082019050818103600083015261355c81612f6f565b9050919050565b6000610140820190506135796000830184612f92565b92915050565b6000610180820190506135956000830186612f92565b6135a3610140830185612ab1565b6135b161016083018461306d565b949350505050565b6000610160820190506135cf6000830185612f92565b6135dd61014083018461306d565b9392505050565b60006020820190506135f9600083018461306d565b92915050565b600061360961361a565b90506136158282613991565b919050565b6000604051905090565b600067ffffffffffffffff82111561363f5761363e613b31565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561366b5761366a613b31565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561369757613696613b31565b5b6136a082613b7e565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061371b826138be565b9150613726836138be565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561375b5761375a613a46565b5b828201905092915050565b6000613771826138be565b915061377c836138be565b92508261378c5761378b613a75565b5b828204905092915050565b60006137a2826138be565b91506137ad836138be565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156137e6576137e5613a46565b5b828202905092915050565b60006137fc826138be565b9150613807836138be565b92508282101561381a57613819613a46565b5b828203905092915050565b60006138308261389e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061388482613825565b9050919050565b60008190506138998261409a565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006138e0826138e7565b9050919050565b60006138f28261389e565b9050919050565b60006139048261388b565b9050919050565b6000613916826138c8565b9050919050565b82818337600083830152505050565b60005b8381101561394a57808201518184015260208101905061392f565b83811115613959576000848401525b50505050565b6000600282049050600182168061397757607f821691505b6020821081141561398b5761398a613ad3565b5b50919050565b61399a82613b7e565b810181811067ffffffffffffffff821117156139b9576139b8613b31565b5b80604052505050565b60006139cd826138be565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613a00576139ff613a46565b5b600182019050919050565b6000819050919050565b6000613a20826138be565b9150613a2b836138be565b925082613a3b57613a3a613a75565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4475726174696f6e20666f7220726574726965732073686f756c64206265206760008201527f726561746572207468616e20313220686f757273000000000000000000000000602082015250565b7f416c726561647920706169640000000000000000000000000000000000000000600082015250565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b7f43616c6c6572206973206e6f742070617965652e000000000000000000000000600082015250565b7f4e6f7420612076616c69642063757272656e6379000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f6e6c79206578656375746f7220636f6e747261637400000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f416d6f756e742063616e6e6f7420626520300000000000000000000000000000600082015250565b7f43616c6c6572206973206e6f742061646d696e00000000000000000000000000600082015250565b7f5369676e617475726520766572696669636174696f6e206661696c6564000000600082015250565b7f4f7574206f662072616e67650000000000000000000000000000000000000000600082015250565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b7f2d00000000000000000000000000000000000000000000000000000000000000600082015250565b7f43616e63656c6c656420696e766f696365000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f4578706972792073686f756c642062652067726561746572207468616e20323460008201527f20686f7572730000000000000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420657865637574652e204e6f7420696e2072616e676500000000600082015250565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b7f4e6f742061207061796565000000000000000000000000000000000000000000600082015250565b7f416c726561647920637265617465640000000000000000000000000000000000600082015250565b7f496e766f696365206e6f7420666f756e64000000000000000000000000000000600082015250565b7f496e766f69636520746f6f20736f6f6e2e2043616e6e6f742070726f63657373600082015250565b600681106140ab576140aa613aa4565b5b50565b6140b781613825565b81146140c257600080fd5b50565b6140ce81613837565b81146140d957600080fd5b50565b6140e581613843565b81146140f057600080fd5b50565b6140fc8161384d565b811461410757600080fd5b50565b61411381613879565b811461411e57600080fd5b50565b6006811061412e57600080fd5b50565b61413a816138be565b811461414557600080fd5b5056fea2646970667358221220afddc2ce8dc84ebdc111eaf08d11a9935dcd4363cceffd0ae7443f07690dc4a464736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 152,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 155,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1034,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 310,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 354,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3330,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_admins",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2592,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "UNIQUE_INDENTIFIER",
        "offset": 0,
        "slot": "152",
        "type": "t_string_storage"
      },
      {
        "astId": 2594,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "EXECUTOR_CONTRACT",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 2661,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "feePercent",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 2666,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_durations",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_enum(Frequency)2541,t_uint256)"
      },
      {
        "astId": 2670,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_createdInvoices",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2676,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "_paidInvoices",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2680,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "cancelledInvoices",
        "offset": 0,
        "slot": "158",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 2684,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "payees",
        "offset": 0,
        "slot": "159",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2689,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "currencies",
        "offset": 0,
        "slot": "160",
        "type": "t_mapping(t_contract(IERC20Upgradeable)433,t_bool)"
      },
      {
        "astId": 2691,
        "contract": "contracts/Invoice/Invoice.sol:Invoice",
        "label": "nonce",
        "offset": 0,
        "slot": "161",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)433": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_enum(Frequency)2541": {
        "encoding": "inplace",
        "label": "enum AbstractInvoice.Frequency",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_contract(IERC20Upgradeable)433,t_bool)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20Upgradeable)433",
        "label": "mapping(contract IERC20Upgradeable => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_enum(Frequency)2541,t_uint256)": {
        "encoding": "mapping",
        "key": "t_enum(Frequency)2541",
        "label": "mapping(enum AbstractInvoice.Frequency => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}